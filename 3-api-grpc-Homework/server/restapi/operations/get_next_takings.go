// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetNextTakingsHandlerFunc turns a function with the right signature into a get next takings handler
type GetNextTakingsHandlerFunc func(GetNextTakingsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNextTakingsHandlerFunc) Handle(params GetNextTakingsParams) middleware.Responder {
	return fn(params)
}

// GetNextTakingsHandler interface for that can handle valid get next takings params
type GetNextTakingsHandler interface {
	Handle(GetNextTakingsParams) middleware.Responder
}

// NewGetNextTakings creates a new http.Handler for the get next takings operation
func NewGetNextTakings(ctx *middleware.Context, handler GetNextTakingsHandler) *GetNextTakings {
	return &GetNextTakings{Context: ctx, Handler: handler}
}

/*
	GetNextTakings swagger:route GET /next_takings getNextTakings

# Get next scheduled takings

Retrieve upcoming medication schedules for a user
*/
type GetNextTakings struct {
	Context *middleware.Context
	Handler GetNextTakingsHandler
}

func (o *GetNextTakings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetNextTakingsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
