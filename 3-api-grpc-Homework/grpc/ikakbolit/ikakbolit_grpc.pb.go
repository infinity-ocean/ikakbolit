// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ikakbolit.proto

package ikakbolit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IkakbolitService_AddSchedule_FullMethodName    = "/ikakbolit.IkakbolitService/AddSchedule"
	IkakbolitService_GetScheduleIDs_FullMethodName = "/ikakbolit.IkakbolitService/GetScheduleIDs"
	IkakbolitService_GetSchedule_FullMethodName    = "/ikakbolit.IkakbolitService/GetSchedule"
	IkakbolitService_GetNextTakings_FullMethodName = "/ikakbolit.IkakbolitService/GetNextTakings"
)

// IkakbolitServiceClient is the client API for IkakbolitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IkakbolitServiceClient interface {
	AddSchedule(ctx context.Context, in *RequestSchedule, opts ...grpc.CallOption) (*ResponseScheduleID, error)
	GetScheduleIDs(ctx context.Context, in *RequestUserID, opts ...grpc.CallOption) (*ResponseScheduleIDs, error)
	GetSchedule(ctx context.Context, in *RequestUserIDScheduleID, opts ...grpc.CallOption) (*ResponseSchedule, error)
	GetNextTakings(ctx context.Context, in *RequestNextTakings, opts ...grpc.CallOption) (*ResponseNextTakings, error)
}

type ikakbolitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIkakbolitServiceClient(cc grpc.ClientConnInterface) IkakbolitServiceClient {
	return &ikakbolitServiceClient{cc}
}

func (c *ikakbolitServiceClient) AddSchedule(ctx context.Context, in *RequestSchedule, opts ...grpc.CallOption) (*ResponseScheduleID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseScheduleID)
	err := c.cc.Invoke(ctx, IkakbolitService_AddSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikakbolitServiceClient) GetScheduleIDs(ctx context.Context, in *RequestUserID, opts ...grpc.CallOption) (*ResponseScheduleIDs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseScheduleIDs)
	err := c.cc.Invoke(ctx, IkakbolitService_GetScheduleIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikakbolitServiceClient) GetSchedule(ctx context.Context, in *RequestUserIDScheduleID, opts ...grpc.CallOption) (*ResponseSchedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseSchedule)
	err := c.cc.Invoke(ctx, IkakbolitService_GetSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ikakbolitServiceClient) GetNextTakings(ctx context.Context, in *RequestNextTakings, opts ...grpc.CallOption) (*ResponseNextTakings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseNextTakings)
	err := c.cc.Invoke(ctx, IkakbolitService_GetNextTakings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IkakbolitServiceServer is the server API for IkakbolitService service.
// All implementations must embed UnimplementedIkakbolitServiceServer
// for forward compatibility.
type IkakbolitServiceServer interface {
	AddSchedule(context.Context, *RequestSchedule) (*ResponseScheduleID, error)
	GetScheduleIDs(context.Context, *RequestUserID) (*ResponseScheduleIDs, error)
	GetSchedule(context.Context, *RequestUserIDScheduleID) (*ResponseSchedule, error)
	GetNextTakings(context.Context, *RequestNextTakings) (*ResponseNextTakings, error)
	mustEmbedUnimplementedIkakbolitServiceServer()
}

// UnimplementedIkakbolitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIkakbolitServiceServer struct{}

func (UnimplementedIkakbolitServiceServer) AddSchedule(context.Context, *RequestSchedule) (*ResponseScheduleID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchedule not implemented")
}
func (UnimplementedIkakbolitServiceServer) GetScheduleIDs(context.Context, *RequestUserID) (*ResponseScheduleIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduleIDs not implemented")
}
func (UnimplementedIkakbolitServiceServer) GetSchedule(context.Context, *RequestUserIDScheduleID) (*ResponseSchedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedIkakbolitServiceServer) GetNextTakings(context.Context, *RequestNextTakings) (*ResponseNextTakings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTakings not implemented")
}
func (UnimplementedIkakbolitServiceServer) mustEmbedUnimplementedIkakbolitServiceServer() {}
func (UnimplementedIkakbolitServiceServer) testEmbeddedByValue()                          {}

// UnsafeIkakbolitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IkakbolitServiceServer will
// result in compilation errors.
type UnsafeIkakbolitServiceServer interface {
	mustEmbedUnimplementedIkakbolitServiceServer()
}

func RegisterIkakbolitServiceServer(s grpc.ServiceRegistrar, srv IkakbolitServiceServer) {
	// If the following call pancis, it indicates UnimplementedIkakbolitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IkakbolitService_ServiceDesc, srv)
}

func _IkakbolitService_AddSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkakbolitServiceServer).AddSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkakbolitService_AddSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkakbolitServiceServer).AddSchedule(ctx, req.(*RequestSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkakbolitService_GetScheduleIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkakbolitServiceServer).GetScheduleIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkakbolitService_GetScheduleIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkakbolitServiceServer).GetScheduleIDs(ctx, req.(*RequestUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkakbolitService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserIDScheduleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkakbolitServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkakbolitService_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkakbolitServiceServer).GetSchedule(ctx, req.(*RequestUserIDScheduleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IkakbolitService_GetNextTakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNextTakings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IkakbolitServiceServer).GetNextTakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IkakbolitService_GetNextTakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IkakbolitServiceServer).GetNextTakings(ctx, req.(*RequestNextTakings))
	}
	return interceptor(ctx, in, info, handler)
}

// IkakbolitService_ServiceDesc is the grpc.ServiceDesc for IkakbolitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IkakbolitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ikakbolit.IkakbolitService",
	HandlerType: (*IkakbolitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSchedule",
			Handler:    _IkakbolitService_AddSchedule_Handler,
		},
		{
			MethodName: "GetScheduleIDs",
			Handler:    _IkakbolitService_GetScheduleIDs_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _IkakbolitService_GetSchedule_Handler,
		},
		{
			MethodName: "GetNextTakings",
			Handler:    _IkakbolitService_GetNextTakings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ikakbolit.proto",
}
